---
description: 
globs: 
alwaysApply: true
---
## **–£—Ä–æ–∫ Fullstack (NestJS + React), –¥–µ–ø–ª–æ–π –≤ Docker —Å Nginx, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD. –ß–∞—Å—Ç—å 1**

### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cursor IDE

1. –°–æ–∑–¥–∞–¥–∏–º —Ñ–∞–π–ª project-checklist.mdc

```markdown
## Fullstack Application Checklist (NestJS + React + Docker + CI/CD)

### Project Setup
- [ ] Initialize project structure
- [ ] Create frontend project (React + Vite)
- [ ] Create backend project (NestJS)
- [ ] Verify frontend works locally
- [ ] Verify backend works locally
- [ ] @cursor: pause(–ñ–¥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ù–∞–ø–∏—à–∏ "OK" —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å)

### Backend Development
- [ ] Create /health endpoint
- [ ] Connect controller to app module
- [ ] Test backend health endpoint

### Frontend Development
- [ ] Create backend status indicator component
- [ ] Implement status polling logic (every 5s)
- [ ] Add styling and animations
- [ ] Test connectivity with backend
- [ ] Verify frontend works locally

### Docker & Infrastructure
- [ ] Create Dockerfile for backend
- [ ] Create Dockerfile for frontend
- [ ] Create docker-compose.yml
- [ ] Create docker-compose.prod.yml
- [ ] Verify docker-compose works locally
- [ ] Configure Nginx for frontend
- [ ] Create deployment scripts

### CI/CD
- [ ] Create GitHub Actions workflows for backend
- [ ] Create GitHub Actions workflows for frontend
- [ ] Create deployment workflow

### Documentation
- [ ] Update README.md with project details
- [ ] Add setup and run instructions 
```
---

### **–í–≤–µ–¥–µ–Ω–∏–µ**
- –û —á—ë–º –±—É–¥–µ—Ç —É—Ä–æ–∫: —Å–æ–∑–¥–∞–Ω–∏–µ fullstack-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (NestJS + React), –¥–µ–ø–ª–æ–π –≤ Docker —Å Nginx, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD.
- –ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è:
    - Backend: **NestJS** (Node.js —Ñ—Ä–µ–π–º–≤–æ—Ä–∫)
    - Frontend: **React** (TypeScript)
    - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: **PostgreSQL** (–∏–ª–∏ MongoDB, –Ω–∞ –≤—ã–±–æ—Ä)
    - –î–µ–ø–ª–æ–π: **Docker** + **Nginx** (–æ–±—Ä–∞—Ç–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –∏ —Å—Ç–∞—Ç–∏–∫–∞)
    - CI/CD: **GitHub Actions** (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–±–æ—Ä–∫–∏ –∏ –¥–µ–ø–ª–æ–π)
    - IDE: **Cursor** (–∞–Ω–∞–ª–æ–≥ VSCode —Å AI)
---

### **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è**
- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∏ Docker Compose (–µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω).
- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
- –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:

## üß± –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

```bash
‚îú‚îÄ‚îÄ apps/                          # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚îÇ   ‚îú‚îÄ‚îÄ backend/                   # NestJS backend (src/, main.ts, controllers, services)
‚îÇ   ‚îî‚îÄ‚îÄ frontend/                  # React + Vite frontend (src/, main.tsx, components, pages)
‚îÇ
‚îú‚îÄ‚îÄ infra/                         # –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
‚îÇ   ‚îú‚îÄ‚îÄ docker/                    # Dockerfile'—ã –∏ docker-compose.yml
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile.backend
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile.frontend
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ docker-compose.yml
‚îÇ   ‚îú‚îÄ‚îÄ nginx/                     # –ö–æ–Ω—Ñ–∏–≥–∏ –¥–ª—è nginx (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω —Ñ—Ä–æ–Ω—Ç–∞)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ default.conf
‚îÇ   ‚îî‚îÄ‚îÄ scripts/                   # –°–∫—Ä–∏–ø—Ç—ã –¥–µ–ø–ª–æ—è, –º–∏–≥—Ä–∞—Ü–∏–π –∏ —Ç.–ø.
‚îÇ       ‚îî‚îÄ‚îÄ deploy.sh
‚îÇ
‚îú‚îÄ‚îÄ .github/
‚îÇ   ‚îî‚îÄ‚îÄ workflows/                 # GitHub Actions workflows (CI/CD)
‚îÇ       ‚îú‚îÄ‚îÄ backend.yml
‚îÇ       ‚îú‚îÄ‚îÄ frontend.yml
‚îÇ       ‚îî‚îÄ‚îÄ deploy.yml
‚îÇ
‚îú‚îÄ‚îÄ .editorconfig
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ README.md
```

---

## üìÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞

- –°–æ–∑–¥–∞—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-–ø—Ä–æ–µ–∫—Ç (React + Vite):
  ```bash
  npm create vite@latest frontend --template react-ts
  ```
-  (NestJS):
  ```bash
  nest new apps/backend
  ```

**–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (React):**

```bash
cd apps/frontend
npm i 

–û—Ç–∫—Ä–æ–π—Ç–µ [http://localhost:5173](http://localhost:5173) ‚Äî –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.

**–ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ç–∫–µ–Ω–¥–∞ (NestJS):**
```bash
cd apps/backend
npm install
npm run start:dev
```  

–û—Ç–∫—Ä–æ–π—Ç–µ [http://localhost:3000](http://localhost:3000) ‚Äî –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å `Hello World!`.

---

## **–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Backend (NestJS)**

#### **–°–æ–∑–¥–∞–µ–º `/health` —ç–Ω–¥–ø–æ–∏–Ω—Ç**
`src/health/health.controller.ts`
```typescript
import { Controller, Get } from '@nestjs/common';

@Controller('health')
export class HealthController {
  @Get()
  checkHealth() {
    return { 
      status: 'ok', 
      timestamp: new Date().toISOString() 
    };
  }
}
```

#### **–ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä**
–í `src/app.module.ts`:
```typescript
import { Module } from '@nestjs/common';
import { HealthController } from './health/health.controller';

@Module({
  controllers: [HealthController],
})
export class AppModule {}
```

#### **–ó–∞–ø—É—Å–∫**
- –í—ã–ø–æ–ª–Ω–∏—Ç–µ:
```bash
npm run start:dev
```  

#### **–ü—Ä–æ–≤–µ—Ä–∫–∞**
–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –≤—Å—Ç—Ä–æ–π—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ Cursor:
```
http://localhost:3000/health
```  
**–û–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç:**
```json
{ "status": "ok", "timestamp": "..." }
```

## **–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Frontend (React)**
### **Frontend (React) - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –±—ç–∫–µ–Ω–¥–∞**

#### **–ß—Ç–æ –¥–µ–ª–∞–µ—Ç?**
1. **–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±—ç–∫–µ–Ω–¥–∞** —á–µ—Ä–µ–∑ `/health` (GET-–∑–∞–ø—Ä–æ—Å).
2. **–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å** –º–∏–≥–∞—é—â–µ–π –∫–Ω–æ–ø–∫–æ–π:
  - üü¢ **–ó–µ–ª–µ–Ω–∞—è** (`Backend Online`) ‚Äî –µ—Å–ª–∏ `/health` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `status: ok`.
  - üî¥ **–ö—Ä–∞—Å–Ω–∞—è** (`Backend Offline`) ‚Äî –µ—Å–ª–∏ –±—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É.
3. **–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ** ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ **5 —Å–µ–∫—É–Ω–¥**.
4. **–ê–Ω–∏–º–∞—Ü–∏—è** ‚Äî –ø–ª–∞–≤–Ω–æ–µ –º–∏–≥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è.
5. **–°—Ç–∏–ª–∏** - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω
6. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –≤ vite.config.js —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø—Ä–æ–±–ª–µ–º —Å CORS –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API, –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∏–¥—É—Ç —á–µ—Ä–µ–∑ /api

```js
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    proxy: {
      '/api': {
        target: 'http://localhost:3000',
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/api/, '')
      }
    }
  }
})
```

**–ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —É–±–µ–¥–∏—Ç—Å—è —á—Ç–æ –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å**

---

## üê≥ Docker –∏ Compose
Dockerfile ‚Äî —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ Docker-–æ–±—Ä–∞–∑–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–ó–∞—á–µ–º –æ–Ω –Ω—É–∂–µ–Ω:
* –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ä–µ–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
* –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —Ä–∞–±–æ—Ç—É –Ω–∞ –ª—é–±–æ–º —Å–µ—Ä–≤–µ—Ä–µ (–ª–æ–∫–∞–ª—å–Ω–æ, –≤ –æ–±–ª–∞–∫–µ –∏ —Ç. –¥.)
* –ò–∑–æ–ª–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Å—Ç–µ–º—ã
* –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –ø–æ–º–æ—â—å—é –º–Ω–æ–≥–æ—Å—Ç–∞–¥–∏–π–Ω–æ–π —Å–±–æ—Ä–∫–∏)

- üîß –ù–∞–ø–∏—Å–∞—Ç—å `Dockerfile` –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (Vite + nginx) `/infra/docker/Dockerfile.frontend`
```dockerfile
# Stage 1: Build application
FROM node:20-alpine AS builder

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
WORKDIR /app

# –ö–æ–ø–∏—Ä—É–µ–º package.json –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
COPY apps/frontend/package*.json ./
RUN npm install

# –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –∏ —Å–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
COPY apps/frontend ./
RUN npm run build

# Stage 2: Nginx –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω-—Ä–∞–∑–¥–∞—á–∏
FROM nginx:stable-alpine AS production

# –£–¥–∞–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
RUN rm /etc/nginx/conf.d/default.conf

# –ö–æ–ø–∏—Ä—É–µ–º –Ω–∞—à Nginx –∫–æ–Ω—Ñ–∏–≥
COPY infra/nginx/default.conf /etc/nginx/conf.d/

# –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏–∫—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ stage
COPY --from=builder /app/dist /usr/share/nginx/html

# –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç
EXPOSE 80

# –ó–∞–ø—É—Å–∫–∞–µ–º Nginx
CMD ["nginx", "-g", "daemon off;"]
```
- üîß –ù–∞–ø–∏—Å–∞—Ç—å `Dockerfile` –¥–ª—è –±—ç–∫–µ–Ω–¥–∞ (NestJS): `/infra/docker/Dockerfile.backend`
```dockerfile
# Stage 1: Build stage
FROM node:20-alpine AS builder

# –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
WORKDIR /app

# –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Ö
COPY apps/backend/package*.json ./
RUN npm install

# –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –∏ —Å–æ–±–∏—Ä–∞–µ–º
COPY apps/backend ./
RUN npm run build

# Stage 2: Production stage
FROM node:20-alpine AS production

# –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
WORKDIR /app

# –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∏–∑ –±–∏–ª–¥-—Å—Ç–∞–¥–∏–∏
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules ./node_modules
COPY apps/backend/package.json ./

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
ENV NODE_ENV=production
EXPOSE 3000

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
CMD ["node", "dist/main"]
```

- –°–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞—Ç—å `/infra/docker/docker-compose.yml`:

```yaml
version: '3.8'

services:
  frontend:
    build:
      context: ../../
      dockerfile: infra/docker/Dockerfile.frontend
    container_name: frontend-app
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - app-network

  backend:
    build:
      context: ../../
      dockerfile: infra/docker/Dockerfile.backend
      target: production
    container_name: backend-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    networks:
      - app-network
networks:
  app-network:
    driver: bridge
```
- –°–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞—Ç—å `/infra/docker/docker-compose.prod.yml`:
```yaml
version: '3.8'

services:
  frontend:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER:-username}/frontend:latest
    container_name: fullstack-app-frontend
    restart: always
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - app-network
    environment:
      - NODE_ENV=production

  backend:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER:-username}/backend:latest
    container_name: fullstack-app-backend
    restart: always
    networks:
      - app-network
    environment:
      - NODE_ENV=production
      - PORT=3000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

networks:
  app-network:
    driver: bridge

```

---
