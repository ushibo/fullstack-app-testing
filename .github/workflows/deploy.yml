name: deploy

on:
  workflow_run:
    workflows: ["backend", "frontend"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: fullstack-app-backend
  FRONTEND_IMAGE: fullstack-app-frontend
  DEPLOY_DIR: /app

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set tag variable
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.tag }}" ]]; then
            echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          else
            echo "TAG=latest" >> $GITHUB_ENV
          fi
          echo "Using tag: $TAG"

      - name: Copy docker-compose file to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "infra/docker/docker-compose.prod.yml"
          target: ${{ env.DEPLOY_DIR }}
          strip_components: 2

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "docker-compose.prod.yml"
          target: "/app/docker-compose.yml"
          script: |
            cd ${{ env.DEPLOY_DIR }}
            
            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–≥
            sed -i "s/\${TAG:-latest}/${{ env.TAG }}/g" docker-compose.yml
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–∑—ã –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.BACKEND_IMAGE }}:${{ env.TAG }}
            docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.FRONTEND_IMAGE }}:${{ env.TAG }}
            
            docker compose down
            docker compose up -d --remove-orphans
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
            sleep 10
            if curl --silent --fail http://localhost/api/health/readiness; then
              echo "üöÄ Deployment successful!"
              # –û—á–∏—Å—Ç–∫–∞
              docker image prune -f
            else
              echo "‚ùå Deployment failed!"
              exit 1
            fi
