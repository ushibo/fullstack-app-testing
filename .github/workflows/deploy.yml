name: deploy

on:
  workflow_run:
    workflows: ["backend", "frontend"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag'
        required: false
        default: 'latest'
      environment:
        description: 'Окружение для деплоя'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging
      service:
        description: 'Сервис для перезапуска (пусто - все сервисы)'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - backend
          - frontend

jobs:
  prepare:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set_env.outputs.tag }}
      environment: ${{ steps.set_env.outputs.environment }}
      service: ${{ steps.set_env.outputs.service }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        id: set_env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "service=${{ github.event.inputs.service }}" >> $GITHUB_OUTPUT
          else
            echo "tag=latest" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "service=" >> $GITHUB_OUTPUT
          fi
          
      - name: Configure production docker-compose
        run: |
          echo "Preparing deployment with TAG: ${{ steps.set_env.outputs.tag }} to ENVIRONMENT: ${{ steps.set_env.outputs.environment }}"
          
          # Создаём директорию, если её нет
          mkdir -p /tmp/deploy

          # Копируем docker-compose файл
          cp infra/docker/docker-compose.prod.yml /tmp/deploy/docker-compose.yml

          # Подставляем переменные окружения
          sed -i "s/\${TAG:-latest}/${{ steps.set_env.outputs.tag }}/g" /tmp/deploy/docker-compose.yml
  
  test-connection:
    needs: prepare
    runs-on: ubuntu-latest
    
    steps:
      - name: Test SSH Connection
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          debug: true
          script: |
            echo "SSH connection successful"
            whoami
            pwd
            echo "Host system info:"
            uname -a
            
      - name: Copy docker-compose to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          debug: true
          source: "/tmp/deploy/docker-compose.yml"
          target: "/var/www/cicd-fullstack/"
          strip_components: 2
  
  deploy:
    needs: [prepare, test-connection]
    runs-on: ubuntu-latest
    
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}
          
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            export GHCR_USERNAME=${{ secrets.GHCR_USERNAME }}
            export GHCR_TOKEN=${{ secrets.GHCR_TOKEN }}
            export TAG=${{ needs.prepare.outputs.tag }}
            export SERVICE="${{ needs.prepare.outputs.service }}"
            
            # Переходим в директорию проекта
            cd /var/www/cicd-fullstack
            
            # Сохраняем копию текущего состояния для отката
            cp docker-compose.yml docker-compose.backup.yml
            
            # Загружаем новые образы
            if [ -z "$SERVICE" ]; then
              echo "Pulling all services"
              docker-compose pull
            else
              echo "Pulling service: $SERVICE"
              docker-compose pull $SERVICE
            fi
            
            # Запускаем новые контейнеры без простоя
            if [ -z "$SERVICE" ]; then
              echo "Restarting all services"
              docker-compose up -d --remove-orphans
            else
              echo "Restarting service: $SERVICE"
              docker-compose up -d --no-deps $SERVICE
            fi

  verify:
    needs: [prepare, deploy]
    runs-on: ubuntu-latest
    
    steps:
      - name: Verify deployment and cleanup
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Переходим в директорию проекта
            cd /var/www/cicd-fullstack
            
            # Проверяем работоспособность после деплоя
            sleep 10
            
            # Проверяем health check backend через frontend
            if ! curl --silent --fail http://localhost/api/health/readiness; then
              echo "Деплой неудачен, выполняем откат"
              cp docker-compose.backup.yml docker-compose.yml
              docker-compose up -d
              exit 1
            else
              echo "Деплой успешен, приложение работает корректно"
            fi
            
            # Очистка неиспользуемых образов (старше 24 часов)
            docker system prune -af --filter "until=24h"
